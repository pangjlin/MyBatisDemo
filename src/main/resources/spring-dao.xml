<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

<!-- =========================配置数据源============================ -->
<!-- 配置数据库连接即数据源 -->
<bean id="dataSource" 
           class="org.springframework.jdbc.datasource. DriverManagerDataSource"> 
     <property name="driverClassName" value="com.mysql.jdbc.Driver" /> 
     <property name="url" value="jdbc:mysql://localhost:3306/mybatis" /> 
     <property name="username" value="root" /> 
     <property name="password" value="root" /> 
</bean>
<!-- =====================针对myBatis的配置项======================== -->
<!-- 创建SqlSessionFactory，同时指定数据源-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
      <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源 -->
      <property name="dataSource" ref="dataSource" />
      <!-- 若手动设置了MyBatis配置，需要指定配置文件位置-->
      <property  name="configLocation"  value="classpath:mybatis-config.xml"/>
      <!-- 自动扫描目录下的所有SQL映射的xml文件-->
      <property name="mapperLocations" 
                       value="classpath:com/ksc/mybatis/mapping/*.xml" />
</bean>
<!-- =========================配置扫描器============================ -->
<!-- 使用MapperScannerConfigurer来扫描包中的映射器mapper接口，并自动注册 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="com.ksc.mybatis.dao" />
      <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
</bean>
<!-- =======================配置事务管理器========================== -->
<tx:annotation-driven transaction-manager="transactionManager"/>
<bean name="transactionManager"  
   class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
<property name="dataSource" ref="dataSource" />  
</bean>